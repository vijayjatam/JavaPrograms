package com.kali.shopping.test;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Arrays;
import java.util.Map;

import javax.swing.JOptionPane;
public class ConsumeItems extends javax.swing.JPanel {

    
	private static final long serialVersionUID = 1L;
	
	 private javax.swing.JButton OkButton;
    /*private javax.swing.JLabel jLabel2;*/
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    /*private javax.swing.JTextField itemNameTextField;*/
    private javax.swing.JLabel loggedInUserLabel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JComboBox menuItemComboBox, subMenuItemComboBox;
    private javax.swing.JTextField consumptionTextField;
    private javax.swing.JLabel jLabel1,jLabel4;
    private javax.swing.JButton resetButton;
    
    
    private Map<String, Map<String, Double>> itemsMap;
    private String loggedInUser=null;
    
    private static final String DRY_ITEMS = "DryItems";

	private static final String OTHERS = "Others";

	private static final String FRUITS = "Fruits";

	private static final String VEG = "Veg";
	
	/** Creates new form ConsumeItemPanel */
    public ConsumeItems() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  
    private void initComponents() {

    	 jPanel1 = new javax.swing.JPanel();
         loggedInUserLabel = new javax.swing.JLabel();
         logoutButton = new javax.swing.JButton();
         jPanel2 = new javax.swing.JPanel();
         /*jLabel2 = new javax.swing.JLabel()*/;
         OkButton = new javax.swing.JButton();
         /*itemNameTextField = new javax.swing.JTextField();*/
         jLabel3 = new javax.swing.JLabel();
         consumptionTextField = new javax.swing.JTextField();
         jLabel1 = new javax.swing.JLabel();
         jLabel4 = new javax.swing.JLabel();
         menuItemComboBox = new javax.swing.JComboBox();
         subMenuItemComboBox = new javax.swing.JComboBox();
         resetButton = new javax.swing.JButton();

         jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Consume Items"));

         loggedInUserLabel.setText("Logged In User :");

         logoutButton.setText("Logout");
         logoutButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 logoutButtonActionPerformed(evt);
             }
         });

         jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(getToolTipText()));

         /*jLabel2.setText("Item Name                                  ")*/;

         OkButton.setText("OK");
         OkButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 OKButtonActionPerformed(evt);
             }
         });

         jLabel3.setText("Consumption per week(Kgs/Ltrs)   ");

         jLabel1.setText("Choose Menu Item                          ");
         
         jLabel4.setText("Choose Submenu Item                       ");

         menuItemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vegetables", "Fruits", "Dry Items", "Others" }));
         /*menuItemComboBox.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 menuItemComboBoxActionPerformed(evt);
             }
         });*/
         menuItemComboBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent evt) {
				menuItemComboBoxActionPerformed(evt);
			}
		});
         
//         subMenuItemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vegetables", "Fruits", "Dry Items", "Others" }));
         
         resetButton.setText("Reset");
         resetButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 resetButtonActionPerformed(evt);
             }
         });

         javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
         jPanel2.setLayout(jPanel2Layout);
         jPanel2Layout.setHorizontalGroup(
             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(jPanel2Layout.createSequentialGroup()
                 .addContainerGap()
                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     /*.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)*/
                     .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                     .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                     .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(consumptionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                     .addComponent(menuItemComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 208, Short.MAX_VALUE)
                     .addComponent(subMenuItemComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 208, Short.MAX_VALUE)
                     /*.addComponent(itemNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)*/
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                         .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addGap(18, 18, 18)
                         .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                 .addContainerGap())
         );
         jPanel2Layout.setVerticalGroup(
             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(jPanel2Layout.createSequentialGroup()
                 .addContainerGap()
                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(menuItemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                 .addGap(26, 26, 26)
                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(subMenuItemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                 .addGap(26, 26, 26)
                 /*.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(itemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                 .addGap(26, 26, 26)*/
                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel3)
                     .addComponent(consumptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                 .addGap(26, 26, 26)
                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(OkButton)
                     .addComponent(resetButton))
                 .addContainerGap(29, Short.MAX_VALUE))
         );

         /*jLabel2.getAccessibleContext().setAccessibleName("Item Name                                           :");*/

         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
         jPanel1.setLayout(jPanel1Layout);
         jPanel1Layout.setHorizontalGroup(
             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                         .addContainerGap()
                         .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                         .addGap(29, 29, 29)
                         .addComponent(loggedInUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                         .addComponent(logoutButton)))
                 .addGap(119, 119, 119))
         );
         jPanel1Layout.setVerticalGroup(
             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(jPanel1Layout.createSequentialGroup()
                 .addGap(20, 20, 20)
                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(logoutButton)
                     .addComponent(loggedInUserLabel))
                 .addGap(27, 27, 27)
                 .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addContainerGap(181, Short.MAX_VALUE))
         );

         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
         this.setLayout(layout);
         layout.setHorizontalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                 .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addContainerGap(20, Short.MAX_VALUE))
         );
         layout.setVerticalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(layout.createSequentialGroup()
                 .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                 .addContainerGap())
         );
    }
private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) 
{
	menuItemComboBox.setSelectedIndex(0);
	subMenuItemComboBox.setSelectedIndex(0);
	menuItemComboBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent evt) {
				menuItemComboBoxActionPerformed(evt);
			}
		});
	/*itemNameTextField.setText("");*/
	consumptionTextField.setText("");
}
private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) 
{
	ShoppingCart.showUserDeatilsPanel();
}

private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) 
{
	String selectedItemNameText = (String)subMenuItemComboBox.getSelectedItem();
	selectedItemNameText = selectedItemNameText.trim();
	/*String itemNameText = itemNameTextField.getText();*/
	String consumeItemText = consumptionTextField.getText();
	/*itemNameText = itemNameText.trim();*/
	consumeItemText= consumeItemText.trim();
    if(/*itemNameText.equals("") ||*/consumeItemText.equals("") || selectedItemNameText.equals(""))
    {
    	JOptionPane.showMessageDialog(null, "Item Name and consuption per week values should not be empty.", "Error", 2);
		/*itemNameTextField.setText("");*/
		consumptionTextField.setText("");
    	return;
    }
    try
	{
	
		Double.valueOf(consumeItemText);
	}
	catch (NumberFormatException e)
	{
		JOptionPane.showMessageDialog(null, "consuption per week value should be a number(in Kgs/Ltrs).", "Error", 2);
		consumptionTextField.setText("");
		return;
	}
	
	
	int selectedIndex = menuItemComboBox.getSelectedIndex();
	String slectedMenuItem=VEG;
	if(selectedIndex==1)
	{
		slectedMenuItem=FRUITS;
	}
	if(selectedIndex==2)
	{
		slectedMenuItem=DRY_ITEMS;
	}
	if(selectedIndex==3)
	{
		slectedMenuItem=OTHERS;
	}
	Map<String, Double> menuItemMap = itemsMap.get(slectedMenuItem);
	if(null !=menuItemMap)
	{
		if(menuItemMap.containsKey(selectedItemNameText))
		{
			Double qty = menuItemMap.get(selectedItemNameText);
			Double qty1=qty-(Double.valueOf(consumeItemText));
			if(qty1<0)
			{
				JOptionPane.showMessageDialog(null, "The list contains only "+qty+" kgs/ltrs of "+selectedItemNameText, "Error", 2);
				consumptionTextField.setText("");
				return;
			}
			menuItemMap.put(selectedItemNameText, qty1);
			JOptionPane.showMessageDialog(null, "The Item Name '"+selectedItemNameText+"' is suceesfully updated.", "Successfully", 1);
			/*itemNameTextField.setText("");*/
			consumptionTextField.setText("");
		}
		else
		{
			JOptionPane.showMessageDialog(null, "The Item Name '"+selectedItemNameText+"' is not in the List.", "Error", 2);
			/*itemNameTextField.setText("");*/
			return;
		}
	}
	else
	{
		JOptionPane.showMessageDialog(null, "The Item Name '"+selectedItemNameText+"' is not in the List.", "Error", 2);
		/*itemNameTextField.setText("");*/
		return;
	}
	
}
private void menuItemComboBoxActionPerformed(ItemEvent evt) 
{
	setSubMenuItems_BasedOn_MenuItems();
}
    
public void setItemsMap(Map<String, Map<String, Double>> itemsMap)
{
	this.itemsMap = itemsMap;
}

public void setLoggedInUser(String loggedInUser) 
{
	this.loggedInUser = loggedInUser;
}

public boolean updatePanel() 
{
	if(loggedInUser==null || loggedInUser.equals(""))
	{
		return false;
	}
	menuItemComboBox.setSelectedIndex(0);
	setSubMenuItems_BasedOn_MenuItems();
	/*itemNameTextField.setText("");*/
	consumptionTextField.setText("");
	loggedInUserLabel.setForeground(new java.awt.Color(161, 255, 149));
	loggedInUserLabel.setText("Logged in User : "+loggedInUser);
	return true;
}

public void setSubMenuItems_BasedOn_MenuItems() {
	int selectedIndex = menuItemComboBox.getSelectedIndex();
	String slectedMenuItem=VEG;
	if(selectedIndex==1) {
		slectedMenuItem=FRUITS;
	}
	if(selectedIndex==2) {
		slectedMenuItem=DRY_ITEMS;
	}
	if(selectedIndex==3) {
		slectedMenuItem=OTHERS;
	}
	if(itemsMap !=null && itemsMap.size() != 0) {
		 Map<String, Double> menuItemMap = itemsMap.get(slectedMenuItem);
		if(null != menuItemMap) {
			subMenuItemComboBox.setEnabled(true);
			Object[] subItemsName = menuItemMap.keySet().toArray();
			Arrays.sort(subItemsName);
			subMenuItemComboBox.setModel(new javax.swing.DefaultComboBoxModel(subItemsName));
			OkButton.setEnabled(true);
		}
		else {
			subMenuItemComboBox.setEnabled(false);
			subMenuItemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new Object[]{"-- NO ITEMS --"}));
			OkButton.setEnabled(false);
		}
	}
}
}
